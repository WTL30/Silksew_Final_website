// import { createContext, useEffect, useState, useCallback } from "react"
// import all_product from "../components/Assets/all_product"
// import axios from "axios"
// import { BASEURL } from "../config"
// import { jwtDecode } from "jwt-decode"

// const delivery_fee = 0

// export const ShopContext = createContext(null)

// const ShopContextProvider = (props) => {
//   const [cartItems, setCartItems] = useState(() => {
//     // Initialize cart items from local storage
//     const savedCartItems = localStorage.getItem("cartItems")
//     return savedCartItems ? JSON.parse(savedCartItems) : []
//   })
//   const [searchTerm, setSearchTerm] = useState("")
//   const [products, setProducts] = useState([])
//   const [token, setToken] = useState("")

//   // Function to validate and set token
//   const validateToken = useCallback(() => {
//     const savedToken = localStorage.getItem("token")
//     if (savedToken) {
//       try {
//         const decodedToken = jwtDecode(savedToken)
//         const currentTime = Date.now() / 1000 // Current time in seconds
//         if (decodedToken.exp > currentTime) {
//           setToken(savedToken) // Set valid token
//         } else {
//           console.error("Token has expired.")
//           localStorage.removeItem("token")
//         }
//       } catch (error) {
//         console.error("Failed to decode token:", error)
//         localStorage.removeItem("token")
//       }
//     }
//   }, [])

//   // Validate token on component mount
//   useEffect(() => {
//     validateToken()
//   }, [validateToken])

//   // Fetch products from API
//   const getProducts = useCallback(async () => {
//     try {
//       const response = await axios.get(BASEURL + "/api/products")
//       if (response.status === 200) {
//         setProducts(response.data.products)
//       } else {
//         console.error("Failed to fetch products. Status:", response.status)
//       }
//     } catch (error) {
//       console.error("Error fetching products:", error.message)
//     }
//   }, [])

//   // Fetch total cart items
//   const getTotalCartItems = useCallback(async () => {
//     if (token) {
//       try {
//         const response = await axios.get(BASEURL + "/api/cart/", {
//           headers: { Authorization: `Bearer ${token}` },
//         })
//         setCartItems(response.data.items || [])
//       } catch (error) {
//         console.error("Failed to fetch cart items:", error.message)
//         if (error.response) {
//           console.error("API Error:", error.response.data)
//         }
//       }
//     } else {
//       console.error("No token provided.")
//     }
//   }, [token])

//   // Add item to cart
//   const addToCart = useCallback((productId, size, color) => {
//     setCartItems((prevItems) => {
//       const existingItemIndex = prevItems.findIndex(
//         (item) => item.productId === productId && item.size === size && item.color === color,
//       )

//       let newItems
//       if (existingItemIndex > -1) {
//         // If the item already exists, increase its quantity
//         newItems = [...prevItems]
//         newItems[existingItemIndex].quantity += 1
//       } else {
//         // If it's a new item, add it to the cart
//         newItems = [...prevItems, { productId, size, color, quantity: 1 }]
//       }

//       // Save to local storage
//       localStorage.setItem("cartItems", JSON.stringify(newItems))
//       return newItems
//     })
//   }, [])

//   // Remove item from cart
//   const removeFromCart = useCallback((productId, size, color) => {
//     setCartItems((prevItems) => {
//       const itemIndex = prevItems.findIndex(
//         (item) => item.productId === productId && item.size === size && item.color === color,
//       )

//       const newItems = [...prevItems]
//       if (itemIndex > -1) {
//         if (newItems[itemIndex].quantity > 1) {
//           // If quantity is more than 1, decrease the quantity
//           newItems[itemIndex].quantity -= 1
//         } else {
//           // If quantity is 1, remove the item from the cart
//           newItems.splice(itemIndex, 1)
//         }
//       }

//       // Save to local storage
//       localStorage.setItem("cartItems", JSON.stringify(newItems))
//       return newItems
//     })
//   }, [])

//   // Calculate total cart amount
//   const getTotalCartAmount = useCallback(() => {
//     return cartItems.reduce((total, cartItem) => {
//       const product = products.find((p) => p._id === cartItem.productId)
//       if (product) {
//         total += product.price * cartItem.quantity
//       }
//       return total
//     }, 0)
//   }, [cartItems, products])

//   // Calculate total number of items in cart
//   const calculateTotalCartItems = useCallback(() => {
//     return cartItems.reduce((total, item) => total + item.quantity, 0)
//   }, [cartItems])

//   useEffect(() => {
//     if (token) {
//       getTotalCartItems()
//     }
//   }, [token, getTotalCartItems])

//   useEffect(() => {
//     getProducts()
//   }, [getProducts])

//   const contextValue = {
//     products,
//     cartItems,
//     addToCart,
//     removeFromCart,
//     getTotalCartAmount,
//     calculateTotalCartItems,
//     all_product,
//     searchTerm,
//     setSearchTerm,
//     setToken,
//     delivery_fee,
//     setCartItems,
//     getTotalCartItems,
//   }

//   return <ShopContext.Provider value={contextValue}>{props.children}</ShopContext.Provider>
// }

// export default ShopContextProvider
