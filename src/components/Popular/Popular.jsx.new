import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './Popular.css';
import axios from 'axios';
import FavoriteButton from '../common/FavoriteButton';

const Popular = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get('https://api.silksew.com/api/products/list');
        const fetchedProducts = Array.isArray(response.data) ? response.data : response.data.products;
        const menProducts = fetchedProducts.filter((product) => product.category.includes('men'));
        setProducts(menProducts);
      } catch (error) {
        setError('Failed to load products');
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, []);

  const shortenName = (name) => (name.length > 25 ? `${name.substring(0, 25)}...` : name);

  const handleViewProduct = (product) => {
    navigate(`/product/${product._id}`, { state: { product } });
  };

  const getImage = (images, availableColors) => {
    if (images && images.length > 0 && availableColors && availableColors.length > 0) {
      try {
        // Iterate over the available colors to find the first color with images
        for (const color of availableColors) {
          // Parse the image data for the current color
          const parsedImages = JSON.parse(images[0]);
          if (parsedImages[color.name] && parsedImages[color.name].length > 0) {
            // Return the first image of the available color
            return parsedImages[color.name][0];
          }
        }
        // If no images found for any color, return the first image
        return images[0];
      } catch (error) {
        console.error('Error parsing images:', error);
        return images[0];
      }
    }
    return images && images.length > 0 ? images[0] : '/logo.png';
  };

  if (loading) return <div className="loading">Loading...</div>;
  if (error) return <div className="error">{error}</div>;
  
  return (
    <div className="popular">
      <h1 className="section-title">POPULAR IN MEN</h1>
      <div className="gradient-line"></div>
      <div className="popular-items">
        {products.length > 0 ? (
          products.slice(0, 4).map((product) => (
            <div 
              key={product._id} 
              className="product-card" 
              onClick={() => handleViewProduct(product)}
            >
              <div className="product-image-container" style={{ position: 'relative' }}>
                <img
                  src={getImage(product.images, product.availableColors)}
                  alt={product.name}
                  className="product-image"
                />
                <div 
                  className="absolute top-2 right-2 z-10" 
                  onClick={(e) => e.stopPropagation()}
                >
                  <FavoriteButton productId={product._id} />
                </div>
              </div>
              <div className="product-details">
                <div className="brand-name">{product.brand || 'BRAND'}</div>
                <h3 className="product-name">{shortenName(product.name)}</h3>
                <div className="price-container">
                  <span className="current-price">₹ {product.price}</span>
                  {product.oldPrice && (
                    <span className="original-price">₹ {product.oldPrice}</span>
                  )}
                </div>
                <button 
                  onClick={(e) => {
                    e.stopPropagation();
                    handleViewProduct(product);
                  }} 
                  className="view-product-btn"
                >
                  View Product
                </button>
              </div>
            </div>
          ))
        ) : (
          <div className="no-products">No products found</div>
        )}
      </div>
    </div>
  );
};

export default Popular;
